#include<bits/stdc++.h>
using namespace std;
int merge(vector<int>& arr, vector<int>& temp_arr, int left, int mid, int right) {
    int i = left, j = mid + 1, k = left, inv_count = 0;
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp_arr[k] = arr[i];
            i++;
        } else {
            temp_arr[k] = arr[j];
            inv_count += (mid - i + 1);
            j++;
        }
        k++;
    }
    while (i <= mid) {
        temp_arr[k] = arr[i];
        i++;
        k++;
    }
    while (j <= right) {
        temp_arr[k] = arr[j];
        j++;
        k++;
    }
    for (i = left; i <= right; i++) {
        arr[i] = temp_arr[i];
    }
    return inv_count;
}
int merge_inv(vector<int>& arr, vector<int>& temp_arr, int left, int right) {
    int inv_count = 0;
    if (left < right) {
        int mid = (left + right) / 2;
        inv_count += merge_inv(arr, temp_arr, left, mid);
        inv_count += merge_inv(arr, temp_arr, mid + 1, right);
        inv_count += merge(arr, temp_arr, left, mid, right);
    }
    return inv_count;
}
int main() {
    int n;
    cout << "N = ";
    cin >> n;
    vector<int> arr(n);
    cout << "arr = ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    vector<int> temp_arr(n);
    int result = merge_inv(arr, temp_arr, 0, n - 1);
    cout << "Total Inversions: " << result << endl;

    return 0;
}
